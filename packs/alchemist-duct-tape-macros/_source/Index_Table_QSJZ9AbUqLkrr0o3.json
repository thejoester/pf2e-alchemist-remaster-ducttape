{
  "name": "Index Table",
  "type": "script",
  "flags": {
    "macro-wheel": {
      "activeCondition": ""
    }
  },
  "command": "(async () => {\n\tconst NS = 'pf2e-alchemist-remaster-ducttape';\n\tconst SETTING_KEY = 'alchIndex';\n\tconst RARITY_ORDER = { common:0, uncommon:1, rare:2, unique:3 };\n\tconst log = (...a) => { try { if (typeof debugLog === 'function') debugLog(...a); } catch {} };\n\tconst esc = (s) => String(s ?? '').replaceAll('&','&amp;').replaceAll('<','&lt;').replaceAll('>','&gt;').replaceAll('\"','&quot;');\n\t\n\t// Query parsing & matching helpers ---\n\tfunction parseQuery(qRaw) {\n\t\tconst terms = [];\n\t\tconst re = /\"([^\"]+)\"|(\\S+)/g; // supports \"quoted phrases\" and plain words\n\t\tlet m;\n\t\twhile ((m = re.exec(qRaw)) !== null) {\n\t\t\tconst raw = (m[1] ?? m[2] ?? \"\").trim();\n\t\t\tif (!raw) continue;\n\n\t\t\t// fielded? e.g., type:elixir, trait:poison, rarity:rare, pack:pf2e, level:>=3\n\t\t\tconst fx = raw.match(/^(\\w+):(.*)$/);\n\t\t\tif (fx) {\n\t\t\t\tconst field = fx[1].toLowerCase();\n\t\t\t\tlet value = fx[2].trim();\n\n\t\t\t\t// handle level comparators like >=3, <=5, >2, <4, =7\n\t\t\t\tif (field === \"level\") {\n\t\t\t\t\tconst cx = value.match(/^(>=|<=|>|<|=)?\\s*(\\d+)$/);\n\t\t\t\t\tif (cx) {\n\t\t\t\t\t\tterms.push({ kind: \"level\", op: (cx[1] ?? \"=\"), num: Number(cx[2]) });\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tterms.push({ kind: \"field\", field, value: value.toLowerCase() });\n\t\t\t} else {\n\t\t\t\t// plain term\n\t\t\t\tterms.push({ kind: \"text\", value: raw.toLowerCase() });\n\t\t\t}\n\t\t}\n\t\treturn terms;\n\t}\n\t\n\tfunction matchRow(row, terms) {\n\t\t// AND all terms\n\t\tfor (const t of terms) {\n\t\t\tif (t.kind === \"text\") {\n\t\t\t\tconst hit =\n\t\t\t\t\trow._lc_name.includes(t.value) ||\n\t\t\t\t\trow._lc_slug.includes(t.value) ||\n\t\t\t\t\trow._lc_type.includes(t.value) ||\n\t\t\t\t\trow._lc_rarity.includes(t.value) ||\n\t\t\t\t\trow._lc_pack.includes(t.value) ||\n\t\t\t\t\trow._lc_img.includes(t.value) ||\n\t\t\t\t\trow._lc_traits.some(tr => tr.includes(t.value)) ||\n\t\t\t\t\tString(row.level).includes(t.value);\n\t\t\t\tif (!hit) return false;\n\t\t\t} else if (t.kind === \"field\") {\n\t\t\t\tconst v = t.value;\n\t\t\t\tswitch (t.field) {\n\t\t\t\t\tcase \"name\":   if (!row._lc_name.includes(v)) return false; break;\n\t\t\t\t\tcase \"slug\":   if (!row._lc_slug.includes(v)) return false; break;\n\t\t\t\t\tcase \"type\":   if (!row._lc_type.includes(v)) return false; break;\n\t\t\t\t\tcase \"rarity\": if (!row._lc_rarity.includes(v)) return false; break;\n\t\t\t\t\tcase \"pack\":   if (!row._lc_pack.includes(v)) return false; break;\n\t\t\t\t\tcase \"img\":    if (!row._lc_img.includes(v)) return false; break;\n\t\t\t\t\tcase \"trait\":\n\t\t\t\t\tcase \"traits\": if (!row._lc_traits.some(tr => tr.includes(v))) return false; break;\n\t\t\t\t\tdefault: // unknown field → fail this term\n\t\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else if (t.kind === \"level\") {\n\t\t\t\tconst L = Number(row.level ?? 0);\n\t\t\t\tswitch (t.op) {\n\t\t\t\t\tcase \">\":  if (!(L >  t.num)) return false; break;\n\t\t\t\t\tcase \"<\":  if (!(L <  t.num)) return false; break;\n\t\t\t\t\tcase \">=\": if (!(L >= t.num)) return false; break;\n\t\t\t\t\tcase \"<=\": if (!(L <= t.num)) return false; break;\n\t\t\t\t\tcase \"=\":\n\t\t\t\t\tdefault:   if (!(L === t.num)) return false; break;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tclass AlchIndexViewer extends foundry.applications.api.ApplicationV2 {\n\t\tstatic get defaultOptions() {\n\t\t\treturn foundry.utils.mergeObject(super.defaultOptions, {\n\t\t\t\tid: 'alch-index-viewer',\n\t\t\t\twindow: { title: 'Alchemical Index Viewer', resizable: true, width: 600, height: 400 },\t// shorter window\n\t\t\t\tposition: { width: 600, height: 400 },\n\t\t\t\ttag: 'section',\n\t\t\t\tclass: ['alch-index-app']\n\t\t\t}, { inplace:false });\n\t\t}\n\n\t\tasync _prepareData() {\n\t\t\tconst idx = game.settings.get(NS, SETTING_KEY) ?? {};\n\t\t\tconst strip = (html) => { try { return foundry.utils.stripHTML(html ?? ''); } catch { return String(html ?? '').replace(/<[^>]+>/g, ''); } };\n\t\t\tconst toSlug = (e) => e?.slug ?? e?.system?.slug ?? game?.pf2e?.system?.sluggify?.(e?.name) ?? e?.name ?? '';\n\t\t\tconst getType = (e) => e?.type ?? e?.system?.type?.value ?? '';\n\t\t\tconst getLevel = (e) => e?.level ?? e?.system?.level?.value ?? 0;\n\t\t\tconst getRarity = (e) => (e?.rarity ?? e?.system?.traits?.rarity ?? 'common').toLowerCase();\n\t\t\tconst getTraits = (e) => (e?.traits ?? e?.system?.traits?.value ?? []).map(t => String(t).toLowerCase());\n\t\t\tconst entries = Object.values(idx?.items ?? {});\n\n\t\t\tthis.rowsAll = entries.map(e => {\n\t\t\t\tconst r = {\n\t\t\t\t\tuuid: e?.uuid ?? '',\n\t\t\t\t\tname: e?.name ?? '',\n\t\t\t\t\tslug: toSlug(e),\n\t\t\t\t\ttype: getType(e),\n\t\t\t\t\tlevel: getLevel(e),\n\t\t\t\t\trarity: getRarity(e),\n\t\t\t\t\ttraits: getTraits(e),\n\t\t\t\t\timg: e?.img ?? '',\n\t\t\t\t\tpack: (e?.uuid ?? '').split('.').slice(1, 2)[0] ?? '',\n\t\t\t\t\ttip: strip(e?.description ?? e?.system?.description?.value ?? '').replace(/\\s+/g, ' ').slice(0, 1200)\n\t\t\t\t};\n\t\t\t\t// cached lowercased fields for quick matching\n\t\t\t\tr._lc_name   = (r.name   ?? '').toLowerCase();\n\t\t\t\tr._lc_slug   = (r.slug   ?? '').toLowerCase();\n\t\t\t\tr._lc_type   = (r.type   ?? '').toLowerCase();\n\t\t\t\tr._lc_rarity = (r.rarity ?? '').toLowerCase();\n\t\t\t\tr._lc_pack   = (r.pack   ?? '').toLowerCase();\n\t\t\t\tr._lc_img    = (r.img    ?? '').toLowerCase();\n\t\t\t\tr._lc_traits = (r.traits ?? []).map(t => String(t).toLowerCase());\n\t\t\t\treturn r;\n\t\t\t});\n\n\t\t\tthis.filter = this.filter ?? '';\n\t\t\tthis.sortKey = this.sortKey ?? 'name';\n\t\t\tthis.sortDir = this.sortDir ?? 'asc';\n\t\t\tthis._refilterAndSort();\n\t\t}\n\n\t\t_refilterAndSort() {\n\t\t\tconst q = String(this.filter ?? '').trim();\n\t\t\tconst terms = parseQuery(q);\n\n\t\t\tthis.rowsFiltered = terms.length\n\t\t\t\t? this.rowsAll.filter(r => matchRow(r, terms))\n\t\t\t\t: this.rowsAll.slice();\n\n\t\t\tconst dir = this.sortDir === 'asc' ? 1 : -1;\n\t\t\tconst nameKey = s => String(s ?? '').replace(/\\s*\\(.*?\\)/g, '').trim().toLowerCase();\n\n\t\t\tthis.rowsFiltered.sort((a,b) => {\n\t\t\t\tlet A,B,c=0,k=this.sortKey;\n\t\t\t\tif (k==='name') { A=nameKey(a.name); B=nameKey(b.name); c=A.localeCompare(B); if(!c) c=(b.level??0)-(a.level??0); }\n\t\t\t\telse if (k==='type') { A=(a.type??'').toLowerCase(); B=(b.type??'').toLowerCase(); c=A.localeCompare(B)||nameKey(a.name).localeCompare(nameKey(b.name)); }\n\t\t\t\telse if (k==='level') { A=a.level??0; B=b.level??0; c=A-B||nameKey(a.name).localeCompare(nameKey(b.name)); }\n\t\t\t\telse if (k==='rarity') { A=RARITY_ORDER[a.rarity]??99; B=RARITY_ORDER[b.rarity]??99; c=A-B||nameKey(a.name).localeCompare(nameKey(b.name)); }\n\t\t\t\telse if (k==='pack') { A=(a.pack??'').toLowerCase(); B=(b.pack??'').toLowerCase(); c=A.localeCompare(B)||nameKey(a.name).localeCompare(nameKey(b.name)); }\n\t\t\t\treturn c*dir;\n\t\t\t});\n\t\t}\n\n\t\t_renderHeader() {\n\t\t\tconst arrow = (k) => this.sortKey!==k ? '' : (this.sortDir==='asc'?' ▲':' ▼');\n\t\t\t// header cells (grid)\n\t\t\treturn (\n\t\t\t\t'<div class=\"h c-img\">Icon</div>'+\n\t\t\t\t'<div class=\"h c-name sortable\" data-sort=\"name\">Name'+arrow('name')+'</div>'+\n\t\t\t\t'<div class=\"h c-type sortable\" data-sort=\"type\">Type'+arrow('type')+'</div>'+\n\t\t\t\t'<div class=\"h c-level sortable\" data-sort=\"level\">Lvl'+arrow('level')+'</div>'+\n\t\t\t\t'<div class=\"h c-traits\">Traits</div>'+\n\t\t\t\t'<div class=\"h c-rarity sortable\" data-sort=\"rarity\">Rarity'+arrow('rarity')+'</div>'+\n\t\t\t\t'<div class=\"h c-pack sortable\" data-sort=\"pack\">Pack'+arrow('pack')+'</div>'\n\t\t\t);\n\t\t}\n\n\t\t_renderRows() {\n\t\t\t// one grid row per entry\n\t\t\treturn this.rowsFiltered.map(r =>\n\t\t\t\t'<div class=\"row\">'+\n\t\t\t\t\t'<div class=\"c-img\">'+(r.img?('<img src=\"'+esc(r.img)+'\" alt=\"\" title=\"'+esc(r.img)+'\" />'):'')+'</div>'+\n\t\t\t\t\t'<div class=\"c-name\"><div class=\"name\" title=\"'+esc(r.tip)+'\">'+esc(r.name)+'</div><div class=\"slug\">'+esc(r.slug)+'</div></div>'+\n\t\t\t\t\t'<div class=\"c-type\">'+esc(r.type)+'</div>'+\n\t\t\t\t\t'<div class=\"c-level\">'+(r.level??'')+'</div>'+\n\t\t\t\t\t'<div class=\"c-traits\">'+esc(r.traits.join(', '))+'</div>'+\n\t\t\t\t\t'<div class=\"c-rarity\">'+esc(r.rarity)+'</div>'+\n\t\t\t\t\t'<div class=\"c-pack\">'+esc(r.pack)+'</div>'+\n\t\t\t\t'</div>'\n\t\t\t).join('');\n\t\t}\n\n\t\tasync _renderHTML() {\n\t\t\tif (!this.rowsAll) await this._prepareData();\n\t\t\tconst gm = game.user.isGM;\n\n\t\t\t// shared column template: icon | name(2x) | type | lvl | traits(2x) | rarity | pack\n\t\t\tconst cols = 'grid-template-columns: 56px minmax(160px,1.5fr) minmax(90px,0.9fr) 0.55fr minmax(160px,1.2fr) 0.8fr 1fr;';\n\n\t\t\tconst css =\n\t\t\t\t'#alch-index-viewer .window-content{display:flex;flex-direction:column;padding:.5rem !important}'+\n\t\t\t\t'#alch-index-viewer section.alch-index-app{display:flex;flex:1 1 auto;min-height:0}'+\n\t\t\t\t'.alch-index-root{display:flex;flex-direction:column;flex:1 1 auto;min-height:0;gap:.5rem}'+\n\t\t\t\t'.alch-toolbar{display:flex;gap:.5rem;align-items:center}'+\n\t\t\t\t'.alch-toolbar input{flex:0 0 60%;width:60%}'+\n\t\t\t\t'.alch-toolbar .btn{padding:.25rem .5rem;border:1px solid var(--color-border,#555);background:rgba(255,255,255,.05);border-radius:.35rem}'+\n\t\t\t\t'.alch-toolbar .btn[disabled]{opacity:.5;pointer-events:none}'+\n\n\t\t\t\t/* header kept outside the scroller so it’s always visible */\n\t\t\t\t'.alch-grid-head{display:grid;'+cols+'gap:0;border:1px solid var(--color-border,#444);border-radius:.5rem .5rem 0 0;background:var(--color-bg-header,#1e1e1e)}'+\n\t\t\t\t'.alch-grid-head .h{padding:.4rem .5rem;border-bottom:1px solid #444;font-weight:600}'+\n\t\t\t\t'.alch-grid-head .sortable{cursor:pointer;user-select:none}'+\n\n\t\t\t\t/* scroll body */\n\t\t\t\t'.alch-grid-body{display:block;flex:1 1 auto;min-height:0;max-height:100%;overflow:auto;border:1px solid var(--color-border,#444);border-top:0;border-radius:0 0 .5rem .5rem}'+\n\t\t\t\t'.alch-grid-body .row{display:grid;'+cols+'gap:0;border-bottom:1px solid #333}'+\n\t\t\t\t'.alch-grid-body .row>div{padding:.35rem .5rem;min-width:0;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}'+\n\t\t\t\t'.alch-grid-body .row:nth-child(odd){background:rgba(255,255,255,.02)}'+\n\n\t\t\t\t/* columns */\n\t\t\t\t'.c-img{text-align:center}.c-img img{width:60px;height:60px;object-fit:contain;border-radius:.25rem}'+\n\t\t\t\t'.c-name .name{font-weight:600;line-height:1.1}.c-name .slug{font-size:.9em;opacity:.7}'+\n\t\t\t\t'.c-level{text-align:right}'+\n\t\t\t\t\n\t\t\t\t// tighten icon\n\t\t\t\t'.c-img{text-align:center}.c-img img{width:52px;height:52px;object-fit:contain;border-radius:.25rem}'+\n\t\t\t\t// ensure truncation everywhere\n\t\t\t\t'.alch-grid-body .row>div{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}'+\n\t\t\t\t'.alch-grid-head .h{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}';\n\n\t\t\tconst head =\n\t\t\t\t'<div class=\"alch-grid-head\" id=\"alch-index-head\">'+\n\t\t\t\t\tthis._renderHeader()+\n\t\t\t\t'</div>';\n\n\t\t\tconst body =\n\t\t\t\t'<div class=\"alch-grid-body\" id=\"alch-index-body\">'+\n\t\t\t\t\tthis._renderRows()+\n\t\t\t\t'</div>';\n\n\t\t\treturn (\n\t\t\t\t'<style>'+css+'</style>'+\n\t\t\t\t'<div class=\"alch-index-root\" id=\"alch-index-root\">'+\n\t\t\t\t\t'<div class=\"alch-toolbar\">'+\n\t\t\t\t\t\t'<input id=\"alch-index-filter\" type=\"text\" placeholder=\"Search name, slug, trait, type, rarity, pack, img…\" value=\"'+esc(this.filter??'')+'\" />'+\n\t\t\t\t\t\t'<button class=\"btn\" data-action=\"search\">Search</button>'+\n\t\t\t\t\t\t'<button class=\"btn\" data-action=\"clear\" '+(gm?'':'disabled')+'>Clear</button>'+\n\t\t\t\t\t\t'<button class=\"btn\" data-action=\"rebuild\" '+(gm?'':'disabled')+'>Rebuild</button>'+\n\t\t\t\t\t\t'<span class=\"count\">Showing <span id=\"alch-index-count\">'+this.rowsFiltered.length+'</span> / '+this.rowsAll.length+'</span>'+\n\t\t\t\t\t'</div>'+\n\t\t\t\t\thead+\n\t\t\t\t\tbody+\n\t\t\t\t'</div>'\n\t\t\t);\n\t\t}\n\n\t\tasync _replaceHTML(result, _options) {\n\t\t\t// 1) Get a real content region and make it flex so the scroller can shrink/scroll.\n\t\t\tconst contentRegion = this.element.querySelector(\".window-content\") || this.element;\n\t\t\tcontentRegion.style.display = \"flex\";\n\t\t\tcontentRegion.style.flexDirection = \"column\";\n\t\t\tcontentRegion.style.height = \"100%\";\n\t\t\tcontentRegion.style.minHeight = \"0\";\n\n\t\t\t// 2) Inject our HTML\n\t\t\tcontentRegion.innerHTML = result;\n\t\t\tthis._root = contentRegion;\n\n\t\t\t// 3) One‑time event delegation\n\t\t\tif (this._delegated) {\n\t\t\t\tthis._rerender();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._delegated = true;\n\n\t\t\tconst root = this._root;\n\n\t\t\t// --- header sorting (unchanged) ---\n\t\t\troot.addEventListener('click', (ev) => {\n\t\t\t\tconst h = ev.target.closest?.('.alch-grid-head .sortable');\n\t\t\t\tif (!h) return;\n\t\t\t\tconst k = h.dataset.sort;\n\t\t\t\tif (!k) return;\n\t\t\t\tif (this.sortKey === k) this.sortDir = (this.sortDir==='asc'?'desc':'asc');\n\t\t\t\telse { this.sortKey = k; this.sortDir = 'asc'; }\n\t\t\t\tthis._refilterAndSort();\n\t\t\t\tthis._rerender();\n\t\t\t});\n\n\t\t\t// --- actions (Search / Clear / Rebuild) (unchanged) ---\n\t\t\troot.addEventListener('click', async (ev) => {\n\t\t\t\tconst btn = ev.target.closest?.('[data-action]');\n\t\t\t\tif (!btn) return;\n\t\t\t\tconst action = btn.dataset.action;\n\n\t\t\t\tif (action === 'search') {\n\t\t\t\t\tconst input = root.querySelector('#alch-index-filter');\n\t\t\t\t\tthis.filter = input?.value ?? '';\n\t\t\t\t\tthis._refilterAndSort();\n\t\t\t\t\tthis._rerender();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (action === 'clear' || action === 'rebuild') {\n\t\t\t\t\tconst uuid = action==='clear'\n\t\t\t\t\t\t? 'Compendium.pf2e-alchemist-remaster-ducttape.alchemist-duct-tape-macros.Macro.tt34u0zjjMG1wyhX'\n\t\t\t\t\t\t: 'Compendium.pf2e-alchemist-remaster-ducttape.alchemist-duct-tape-macros.Macro.lRf5jfyF8A6Ceh8s';\n\t\t\t\t\tif (!game.user.isGM) return;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst macro = await fromUuid(uuid);\n\t\t\t\t\t\tif (macro && typeof macro.execute === 'function') {\n\t\t\t\t\t\t\tawait macro.execute();\n\t\t\t\t\t\t\tawait this._prepareData();\n\t\t\t\t\t\t\tthis._rerender();\n\t\t\t\t\t\t\tconst gmIds = game.users.filter(u => u.isGM).map(u => u.id);\n\t\t\t\t\t\t\tif (gmIds.length) await ChatMessage.create({ content: 'AlchIndex: '+(action==='clear'?'Cleared':'Rebuilt'), whisper: gmIds });\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (err) { log('macro error: '+(err?.message ?? err)); }\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// --- live filter while typing (debounced) ---\n\t\t\tlet _debTimer = null;\n\t\t\tconst inputEl = root.querySelector('#alch-index-filter');\n\t\t\tinputEl?.addEventListener('input', (ev) => {\n\t\t\t\tconst val = ev.currentTarget.value ?? '';\n\t\t\t\tclearTimeout(_debTimer);\n\t\t\t\t_debTimer = setTimeout(() => {\n\t\t\t\t\tthis.filter = val;\n\t\t\t\t\tthis._refilterAndSort();\n\t\t\t\t\tthis._rerender();\n\t\t\t\t}, 150);\n\t\t\t}, { passive: true });\n\n\t\t\t// --- Enter to search (unchanged) ---\n\t\t\troot.addEventListener('keydown', (ev) => {\n\t\t\t\tif (ev.key !== 'Enter') return;\n\t\t\t\tif (ev.target?.id === 'alch-index-filter') {\n\t\t\t\t\tthis.filter = ev.target.value ?? '';\n\t\t\t\t\tthis._refilterAndSort();\n\t\t\t\t\tthis._rerender();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t_rerender() {\n\t\t\tconst root = this._root;\n\t\t\tif (!root) return;\n\t\t\tconst head = root.querySelector('#alch-index-head');\n\t\t\tconst body = root.querySelector('#alch-index-body');\n\t\t\tconst count = root.querySelector('#alch-index-count');\n\t\t\tif (head) head.innerHTML = this._renderHeader();\n\t\t\tif (body) body.innerHTML = this._renderRows();\n\t\t\tif (count) count.textContent = String(this.rowsFiltered.length);\n\t\t}\n\t}\n\n\tnew AlchIndexViewer().render(true);\n})();",
  "img": "icons/sundries/books/book-stack.webp",
  "author": "EpqDCtSCbVNM4wPj",
  "scope": "global",
  "folder": "vsc8kgpLB8at8Ww9",
  "ownership": {
    "default": 0,
    "EpqDCtSCbVNM4wPj": 3
  },
  "_stats": {
    "compendiumSource": null,
    "duplicateSource": null,
    "exportSource": null,
    "coreVersion": "13.346",
    "systemId": "pf2e",
    "systemVersion": "7.4.1",
    "createdTime": 1756516474254,
    "modifiedTime": 1756516474254,
    "lastModifiedBy": "EpqDCtSCbVNM4wPj"
  },
  "_id": "QSJZ9AbUqLkrr0o3",
  "sort": 0,
  "_key": "!macros!QSJZ9AbUqLkrr0o3"
}
